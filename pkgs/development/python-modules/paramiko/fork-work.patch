diff --git a/paramiko/buffered_pipe.py b/paramiko/buffered_pipe.py
index 69445c97..54ebd1f1 100644
--- a/paramiko/buffered_pipe.py
+++ b/paramiko/buffered_pipe.py
@@ -25,6 +25,7 @@ read operations are blocking and can have a timeout set.
 import array
 import threading
 import time
+import socket
 from paramiko.py3compat import PY2, b
 
 
@@ -123,7 +124,7 @@ class BufferedPipe(object):
         finally:
             self._lock.release()
 
-    def read(self, nbytes, timeout=None):
+    def read(self, nbytes, timeout=None, flags = 0):
         """
         Read data from the pipe.  The return value is a string representing
         the data received.  The maximum amount of data to be received at once
@@ -138,12 +139,21 @@ class BufferedPipe(object):
         :param int nbytes: maximum number of bytes to read
         :param float timeout:
             maximum seconds to wait (or ``None``, the default, to wait forever)
+        :param int flags:
+            socket recv flags (currently only supports socket.MSG_PEEK)
+
         :return: the read data, as a ``str`` or ``bytes``
 
         :raises:
             `.PipeTimeout` -- if a timeout was specified and no data was ready
             before that timeout
         """
+
+        if flags != 0 and flags != socket.MSG_PEEK:
+            raise NotImplementedError(
+                    "only the socket.MSG_PEEK recv flag is supported"
+            )
+
         out = bytes()
         self._lock.acquire()
         try:
@@ -166,12 +176,14 @@ class BufferedPipe(object):
             # something's in the buffer and we have the lock!
             if len(self._buffer) <= nbytes:
                 out = self._buffer_tobytes()
-                del self._buffer[:]
+                if flags != socket.MSG_PEEK:
+                    del self._buffer[:]
                 if (self._event is not None) and not self._closed:
                     self._event.clear()
             else:
                 out = self._buffer_tobytes(nbytes)
-                del self._buffer[:nbytes]
+                if flags != socket.MSG_PEEK:
+                    del self._buffer[:nbytes]
         finally:
             self._lock.release()
 
diff --git a/paramiko/channel.py b/paramiko/channel.py
index 72f65012..7397c859 100644
--- a/paramiko/channel.py
+++ b/paramiko/channel.py
@@ -682,7 +682,7 @@ class Channel(ClosingContextManager):
         """
         return self.in_buffer.read_ready()
 
-    def recv(self, nbytes):
+    def recv(self, nbytes, flags=0):
         """
         Receive data from the channel.  The return value is a string
         representing the data received.  The maximum amount of data to be
@@ -690,13 +690,16 @@ class Channel(ClosingContextManager):
         length zero is returned, the channel stream has closed.
 
         :param int nbytes: maximum number of bytes to read.
+        :param int flags:
+            socket recv flags (currently only supports socket.MSG_PEEK)
+
         :return: received data, as a ``str``/``bytes``.
 
         :raises socket.timeout:
             if no data is ready before the timeout set by `settimeout`.
         """
         try:
-            out = self.in_buffer.read(nbytes, self.timeout)
+            out = self.in_buffer.read(nbytes, self.timeout, flags=flags)
         except PipeTimeout:
             raise socket.timeout()
 
